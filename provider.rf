provider "aws" {
  region = "us-west-2"  # Replace with your desired region
}

module "eks_cluster" {
  source = "terraform-aws-modules/eks/aws"

  cluster_name      = "my-eks-cluster"
  cluster_version   = "1.21"
  subnets           = ["subnet-abc123", "subnet-def456"] 
  vpc_id            = "vpc-#"  
  worker_groups = [
    {
      instance_type = "t3.medium"
      asg_max_size  = 5
    },
  ]
}


resource "aws_db_instance" "rds_instance" {
  identifier             = "my-rds-instance"
  engine                 = "postgres"
  engine_version         = "12.7"
  instance_class         = "db.t3.small"
  allocated_storage      = 20
  storage_type           = "gp2"
  username               = "admin"
  password               = "password"
  publicly_accessible    = false
  db_subnet_group_name   = "my-db-subnet-group"
  vpc_security_group_ids = ["sg-abc123"]
}

from flask import Flask, request
import psycopg2

app = Flask(__name__)

# Database connection configuration
db_host = "your-db-host"
db_port = "your-db-port"
db_name = "your-db-name"
db_user = "your-db-user"
db_password = "your-db-password"

def connect_to_db():
    return psycopg2.connect(
        host=db_host,
        port=db_port,
        dbname=db_name,
        user=db_user,
        password=db_password
    )


##Python APIs to interact with the Database
@app.route("/add_record", methods=["POST"])
def add_record():
    data = request.get_json()
    username = data.get("username")
    dob = data.get("dob")
    email = data.get("email")

    conn = connect_to_db()
    cursor = conn.cursor()
    cursor.execute(
        "INSERT INTO users (username, dob, email) VALUES (%s, %s, %s)",
        (username, dob, email)
    )
    conn.commit()
    cursor.close()
    conn.close()

    return "Record added successfully"

@app.route("/update_record", methods=["PUT"])
def update_record():
    data = request.get_json()
    username = data.get("username")
    new_email = data.get("email")

    conn = connect_to_db()
    cursor = conn.cursor()
    cursor.execute(
        "UPDATE users SET email = %s WHERE username = %s",
        (new_email, username)
    )
    conn.commit()
    cursor.close()
    conn.close()

    return "Record updated successfully"

@app.route("/delete_record", methods=["DELETE"])
def delete_record():
    username
